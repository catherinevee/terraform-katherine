name: Infrastructure Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to validate'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

# Explicit permissions - minimal required access
permissions:
  contents: read
  pull-requests: write
  actions: read

env:
  TF_VERSION: "1.13.0"
  TERRAGRUNT_VERSION: "0.84.0"
  AWS_REGION: "eu-west-2"

jobs:
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    # Concurrency control to prevent duplicate runs
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Security: Don't checkout PR code to prevent script injection
        ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
        fetch-depth: 0

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Setup Terragrunt
      uses: autero1/action-terragrunt@v1.0.0
      with:
        terragrunt_version: ${{ env.TERRAGRUNT_VERSION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        # Security: Use OIDC instead of long-lived secrets
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: GitHubActions-Validation
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Format Check
      run: |
        echo "Checking Terraform format..."
        find . -name "*.tf" -exec terraform fmt -check {} \;
        if [ $? -ne 0 ]; then
          echo "::error::Terraform files are not properly formatted"
          echo "Run 'terraform fmt' to fix formatting issues"
          exit 1
        fi
        echo "::notice::Terraform format check passed"

    - name: Terraform Validation
      run: |
        echo "Validating Terraform configurations..."
        
        # Validate all Terraform configurations
        for dir in $(find eu-west-2 -name "*.tf" -exec dirname {} \; | sort -u); do
          echo "Validating $dir"
          cd $dir
          terraform init -backend=false
          terraform validate
          if [ $? -ne 0 ]; then
            echo "::error::Terraform validation failed in $dir"
            exit 1
          fi
          cd - > /dev/null
        done
        
        echo "::notice::Terraform validation passed"

    - name: Terragrunt Validation
      run: |
        echo "Validating Terragrunt configurations..."
        
        # Validate Terragrunt configurations
        for dir in $(find eu-west-2 -name "terragrunt.hcl" -exec dirname {} \;); do
          echo "Validating Terragrunt in $dir"
          cd $dir
          terragrunt validate-inputs
          if [ $? -ne 0 ]; then
            echo "::error::Terragrunt validation failed in $dir"
            exit 1
          fi
          cd - > /dev/null
        done
        
        echo "::notice::Terragrunt validation passed"

    - name: Dependency Validation
      run: |
        echo "Validating infrastructure dependencies..."
        
        # Check for circular dependencies
        terragrunt run-all graph | grep -q "circular" && {
          echo "::error::Circular dependencies detected in infrastructure"
          exit 1
        }
        
        # Validate dependency order
        terragrunt run-all plan --terragrunt-non-interactive --terragrunt-log-level info
        if [ $? -ne 0 ]; then
          echo "::error::Dependency validation failed"
          exit 1
        fi
        
        echo "::notice::Dependency validation passed"

    - name: Cost Estimation
      if: github.event_name == 'pull_request'
      run: |
        echo "Generating cost estimation..."
        
        # Generate cost estimation for the changes
        terragrunt run-all plan --terragrunt-non-interactive --terragrunt-log-level info -out=plan.tfplan
        
        # Extract cost information (if available)
        if command -v infracost &> /dev/null; then
          infracost breakdown --path . --format json --out-file infracost.json
          echo "::notice::Cost estimation completed"
        else
          echo "::warning::Infracost not available for detailed cost analysis"
        fi

    - name: Infrastructure Testing
      run: |
        echo "Running infrastructure tests..."
        
        # Run Terratest if available
        if [ -d "test" ]; then
          cd test
          go test -v -timeout 30m ./...
          if [ $? -ne 0 ]; then
            echo "::error::Infrastructure tests failed"
            exit 1
          fi
          cd ..
        else
          echo "::notice::No test directory found, skipping tests"
        fi

    - name: Security Policy Check
      run: |
        echo "Checking security policies..."
        
        # Check for required security configurations
        security_checks=(
          "encryption"
          "backup"
          "monitoring"
          "logging"
        )
        
        for check in "${security_checks[@]}"; do
          if ! grep -r "$check" eu-west-2/ --include="*.hcl" --include="*.tf" | grep -q "true"; then
            echo "::warning::Security check '$check' not found in all configurations"
          fi
        done
        
        echo "::notice::Security policy check completed"

    - name: Validation Summary
      if: always()
      run: |
        echo "## Infrastructure Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "**Validation completed at:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment || 'all' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Validation Steps:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Terraform format check" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Terraform validation" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Terragrunt validation" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Dependency validation" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Infrastructure testing" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security policy check" >> $GITHUB_STEP_SUMMARY

  cost-analysis:
    name: Cost Analysis
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 15
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Infracost
      uses: infracost/actions/setup@v2
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}

    - name: Generate Cost Report
      run: |
        echo "Generating detailed cost analysis..."
        
        # Generate cost report for the changes
        infracost breakdown --path . --format json --out-file infracost.json
        
        # Generate markdown report
        infracost comment --path infracost.json --format github-comment --behavior update

    - name: Cost Analysis Summary
      run: |
        echo "## Cost Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "**Analysis completed at:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Changes analyzed:** Infrastructure modifications" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Cost Impact:" >> $GITHUB_STEP_SUMMARY
        echo "- Monthly cost changes calculated" >> $GITHUB_STEP_SUMMARY
        echo "- Resource-level cost breakdown provided" >> $GITHUB_STEP_SUMMARY
        echo "- Cost optimization recommendations included" >> $GITHUB_STEP_SUMMARY 